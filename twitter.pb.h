// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: twitter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_twitter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_twitter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_twitter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_twitter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_twitter_2eproto;
namespace twitter {
class login_reply;
class login_replyDefaultTypeInternal;
extern login_replyDefaultTypeInternal _login_reply_default_instance_;
class login_request;
class login_requestDefaultTypeInternal;
extern login_requestDefaultTypeInternal _login_request_default_instance_;
class tweet_reply;
class tweet_replyDefaultTypeInternal;
extern tweet_replyDefaultTypeInternal _tweet_reply_default_instance_;
class tweet_request;
class tweet_requestDefaultTypeInternal;
extern tweet_requestDefaultTypeInternal _tweet_request_default_instance_;
class user_reply;
class user_replyDefaultTypeInternal;
extern user_replyDefaultTypeInternal _user_reply_default_instance_;
class user_request;
class user_requestDefaultTypeInternal;
extern user_requestDefaultTypeInternal _user_request_default_instance_;
}  // namespace twitter
PROTOBUF_NAMESPACE_OPEN
template<> ::twitter::login_reply* Arena::CreateMaybeMessage<::twitter::login_reply>(Arena*);
template<> ::twitter::login_request* Arena::CreateMaybeMessage<::twitter::login_request>(Arena*);
template<> ::twitter::tweet_reply* Arena::CreateMaybeMessage<::twitter::tweet_reply>(Arena*);
template<> ::twitter::tweet_request* Arena::CreateMaybeMessage<::twitter::tweet_request>(Arena*);
template<> ::twitter::user_reply* Arena::CreateMaybeMessage<::twitter::user_reply>(Arena*);
template<> ::twitter::user_request* Arena::CreateMaybeMessage<::twitter::user_request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace twitter {

// ===================================================================

class user_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:twitter.user_request) */ {
 public:
  inline user_request() : user_request(nullptr) {}
  virtual ~user_request();

  user_request(const user_request& from);
  user_request(user_request&& from) noexcept
    : user_request() {
    *this = ::std::move(from);
  }

  inline user_request& operator=(const user_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_request& operator=(user_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_request* internal_default_instance() {
    return reinterpret_cast<const user_request*>(
               &_user_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(user_request& a, user_request& b) {
    a.Swap(&b);
  }
  inline void Swap(user_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_request* New() const final {
    return CreateMaybeMessage<user_request>(nullptr);
  }

  user_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_request& from);
  void MergeFrom(const user_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "twitter.user_request";
  }
  protected:
  explicit user_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_twitter_2eproto);
    return ::descriptor_table_twitter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:twitter.user_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_twitter_2eproto;
};
// -------------------------------------------------------------------

class user_reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:twitter.user_reply) */ {
 public:
  inline user_reply() : user_reply(nullptr) {}
  virtual ~user_reply();

  user_reply(const user_reply& from);
  user_reply(user_reply&& from) noexcept
    : user_reply() {
    *this = ::std::move(from);
  }

  inline user_reply& operator=(const user_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_reply& operator=(user_reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_reply* internal_default_instance() {
    return reinterpret_cast<const user_reply*>(
               &_user_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(user_reply& a, user_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(user_reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_reply* New() const final {
    return CreateMaybeMessage<user_reply>(nullptr);
  }

  user_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_reply& from);
  void MergeFrom(const user_reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "twitter.user_reply";
  }
  protected:
  explicit user_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_twitter_2eproto);
    return ::descriptor_table_twitter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResRegisterFieldNumber = 1,
  };
  // string res_register = 1;
  void clear_res_register();
  const std::string& res_register() const;
  void set_res_register(const std::string& value);
  void set_res_register(std::string&& value);
  void set_res_register(const char* value);
  void set_res_register(const char* value, size_t size);
  std::string* mutable_res_register();
  std::string* release_res_register();
  void set_allocated_res_register(std::string* res_register);
  private:
  const std::string& _internal_res_register() const;
  void _internal_set_res_register(const std::string& value);
  std::string* _internal_mutable_res_register();
  public:

  // @@protoc_insertion_point(class_scope:twitter.user_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_register_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_twitter_2eproto;
};
// -------------------------------------------------------------------

class login_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:twitter.login_request) */ {
 public:
  inline login_request() : login_request(nullptr) {}
  virtual ~login_request();

  login_request(const login_request& from);
  login_request(login_request&& from) noexcept
    : login_request() {
    *this = ::std::move(from);
  }

  inline login_request& operator=(const login_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_request& operator=(login_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_request* internal_default_instance() {
    return reinterpret_cast<const login_request*>(
               &_login_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(login_request& a, login_request& b) {
    a.Swap(&b);
  }
  inline void Swap(login_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_request* New() const final {
    return CreateMaybeMessage<login_request>(nullptr);
  }

  login_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_request& from);
  void MergeFrom(const login_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "twitter.login_request";
  }
  protected:
  explicit login_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_twitter_2eproto);
    return ::descriptor_table_twitter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:twitter.login_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_twitter_2eproto;
};
// -------------------------------------------------------------------

class login_reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:twitter.login_reply) */ {
 public:
  inline login_reply() : login_reply(nullptr) {}
  virtual ~login_reply();

  login_reply(const login_reply& from);
  login_reply(login_reply&& from) noexcept
    : login_reply() {
    *this = ::std::move(from);
  }

  inline login_reply& operator=(const login_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_reply& operator=(login_reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_reply* internal_default_instance() {
    return reinterpret_cast<const login_reply*>(
               &_login_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(login_reply& a, login_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(login_reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_reply* New() const final {
    return CreateMaybeMessage<login_reply>(nullptr);
  }

  login_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_reply& from);
  void MergeFrom(const login_reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "twitter.login_reply";
  }
  protected:
  explicit login_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_twitter_2eproto);
    return ::descriptor_table_twitter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResLoginFieldNumber = 1,
  };
  // string res_login = 1;
  void clear_res_login();
  const std::string& res_login() const;
  void set_res_login(const std::string& value);
  void set_res_login(std::string&& value);
  void set_res_login(const char* value);
  void set_res_login(const char* value, size_t size);
  std::string* mutable_res_login();
  std::string* release_res_login();
  void set_allocated_res_login(std::string* res_login);
  private:
  const std::string& _internal_res_login() const;
  void _internal_set_res_login(const std::string& value);
  std::string* _internal_mutable_res_login();
  public:

  // @@protoc_insertion_point(class_scope:twitter.login_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_login_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_twitter_2eproto;
};
// -------------------------------------------------------------------

class tweet_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:twitter.tweet_request) */ {
 public:
  inline tweet_request() : tweet_request(nullptr) {}
  virtual ~tweet_request();

  tweet_request(const tweet_request& from);
  tweet_request(tweet_request&& from) noexcept
    : tweet_request() {
    *this = ::std::move(from);
  }

  inline tweet_request& operator=(const tweet_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline tweet_request& operator=(tweet_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tweet_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tweet_request* internal_default_instance() {
    return reinterpret_cast<const tweet_request*>(
               &_tweet_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(tweet_request& a, tweet_request& b) {
    a.Swap(&b);
  }
  inline void Swap(tweet_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tweet_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tweet_request* New() const final {
    return CreateMaybeMessage<tweet_request>(nullptr);
  }

  tweet_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tweet_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tweet_request& from);
  void MergeFrom(const tweet_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tweet_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "twitter.tweet_request";
  }
  protected:
  explicit tweet_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_twitter_2eproto);
    return ::descriptor_table_twitter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTweetFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kCommandFieldNumber = 3,
    kIdFieldNumber = 4,
  };
  // string tweet = 1;
  void clear_tweet();
  const std::string& tweet() const;
  void set_tweet(const std::string& value);
  void set_tweet(std::string&& value);
  void set_tweet(const char* value);
  void set_tweet(const char* value, size_t size);
  std::string* mutable_tweet();
  std::string* release_tweet();
  void set_allocated_tweet(std::string* tweet);
  private:
  const std::string& _internal_tweet() const;
  void _internal_set_tweet(const std::string& value);
  std::string* _internal_mutable_tweet();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string command = 3;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string id = 4;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:twitter.tweet_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tweet_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_twitter_2eproto;
};
// -------------------------------------------------------------------

class tweet_reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:twitter.tweet_reply) */ {
 public:
  inline tweet_reply() : tweet_reply(nullptr) {}
  virtual ~tweet_reply();

  tweet_reply(const tweet_reply& from);
  tweet_reply(tweet_reply&& from) noexcept
    : tweet_reply() {
    *this = ::std::move(from);
  }

  inline tweet_reply& operator=(const tweet_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline tweet_reply& operator=(tweet_reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tweet_reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tweet_reply* internal_default_instance() {
    return reinterpret_cast<const tweet_reply*>(
               &_tweet_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(tweet_reply& a, tweet_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(tweet_reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tweet_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tweet_reply* New() const final {
    return CreateMaybeMessage<tweet_reply>(nullptr);
  }

  tweet_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tweet_reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tweet_reply& from);
  void MergeFrom(const tweet_reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tweet_reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "twitter.tweet_reply";
  }
  protected:
  explicit tweet_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_twitter_2eproto);
    return ::descriptor_table_twitter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResTweetFieldNumber = 1,
  };
  // string res_tweet = 1;
  void clear_res_tweet();
  const std::string& res_tweet() const;
  void set_res_tweet(const std::string& value);
  void set_res_tweet(std::string&& value);
  void set_res_tweet(const char* value);
  void set_res_tweet(const char* value, size_t size);
  std::string* mutable_res_tweet();
  std::string* release_res_tweet();
  void set_allocated_res_tweet(std::string* res_tweet);
  private:
  const std::string& _internal_res_tweet() const;
  void _internal_set_res_tweet(const std::string& value);
  std::string* _internal_mutable_res_tweet();
  public:

  // @@protoc_insertion_point(class_scope:twitter.tweet_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_tweet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_twitter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// user_request

// string username = 1;
inline void user_request::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_request::username() const {
  // @@protoc_insertion_point(field_get:twitter.user_request.username)
  return _internal_username();
}
inline void user_request::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:twitter.user_request.username)
}
inline std::string* user_request::mutable_username() {
  // @@protoc_insertion_point(field_mutable:twitter.user_request.username)
  return _internal_mutable_username();
}
inline const std::string& user_request::_internal_username() const {
  return username_.Get();
}
inline void user_request::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_request::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:twitter.user_request.username)
}
inline void user_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:twitter.user_request.username)
}
inline void user_request::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:twitter.user_request.username)
}
inline std::string* user_request::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_request::release_username() {
  // @@protoc_insertion_point(field_release:twitter.user_request.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_request::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:twitter.user_request.username)
}

// string password = 2;
inline void user_request::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_request::password() const {
  // @@protoc_insertion_point(field_get:twitter.user_request.password)
  return _internal_password();
}
inline void user_request::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:twitter.user_request.password)
}
inline std::string* user_request::mutable_password() {
  // @@protoc_insertion_point(field_mutable:twitter.user_request.password)
  return _internal_mutable_password();
}
inline const std::string& user_request::_internal_password() const {
  return password_.Get();
}
inline void user_request::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_request::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:twitter.user_request.password)
}
inline void user_request::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:twitter.user_request.password)
}
inline void user_request::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:twitter.user_request.password)
}
inline std::string* user_request::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_request::release_password() {
  // @@protoc_insertion_point(field_release:twitter.user_request.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_request::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:twitter.user_request.password)
}

// -------------------------------------------------------------------

// user_reply

// string res_register = 1;
inline void user_reply::clear_res_register() {
  res_register_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_reply::res_register() const {
  // @@protoc_insertion_point(field_get:twitter.user_reply.res_register)
  return _internal_res_register();
}
inline void user_reply::set_res_register(const std::string& value) {
  _internal_set_res_register(value);
  // @@protoc_insertion_point(field_set:twitter.user_reply.res_register)
}
inline std::string* user_reply::mutable_res_register() {
  // @@protoc_insertion_point(field_mutable:twitter.user_reply.res_register)
  return _internal_mutable_res_register();
}
inline const std::string& user_reply::_internal_res_register() const {
  return res_register_.Get();
}
inline void user_reply::_internal_set_res_register(const std::string& value) {
  
  res_register_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_reply::set_res_register(std::string&& value) {
  
  res_register_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:twitter.user_reply.res_register)
}
inline void user_reply::set_res_register(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_register_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:twitter.user_reply.res_register)
}
inline void user_reply::set_res_register(const char* value,
    size_t size) {
  
  res_register_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:twitter.user_reply.res_register)
}
inline std::string* user_reply::_internal_mutable_res_register() {
  
  return res_register_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_reply::release_res_register() {
  // @@protoc_insertion_point(field_release:twitter.user_reply.res_register)
  return res_register_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_reply::set_allocated_res_register(std::string* res_register) {
  if (res_register != nullptr) {
    
  } else {
    
  }
  res_register_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_register,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:twitter.user_reply.res_register)
}

// -------------------------------------------------------------------

// login_request

// string username = 1;
inline void login_request::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& login_request::username() const {
  // @@protoc_insertion_point(field_get:twitter.login_request.username)
  return _internal_username();
}
inline void login_request::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:twitter.login_request.username)
}
inline std::string* login_request::mutable_username() {
  // @@protoc_insertion_point(field_mutable:twitter.login_request.username)
  return _internal_mutable_username();
}
inline const std::string& login_request::_internal_username() const {
  return username_.Get();
}
inline void login_request::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void login_request::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:twitter.login_request.username)
}
inline void login_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:twitter.login_request.username)
}
inline void login_request::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:twitter.login_request.username)
}
inline std::string* login_request::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* login_request::release_username() {
  // @@protoc_insertion_point(field_release:twitter.login_request.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_request::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:twitter.login_request.username)
}

// string password = 2;
inline void login_request::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& login_request::password() const {
  // @@protoc_insertion_point(field_get:twitter.login_request.password)
  return _internal_password();
}
inline void login_request::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:twitter.login_request.password)
}
inline std::string* login_request::mutable_password() {
  // @@protoc_insertion_point(field_mutable:twitter.login_request.password)
  return _internal_mutable_password();
}
inline const std::string& login_request::_internal_password() const {
  return password_.Get();
}
inline void login_request::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void login_request::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:twitter.login_request.password)
}
inline void login_request::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:twitter.login_request.password)
}
inline void login_request::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:twitter.login_request.password)
}
inline std::string* login_request::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* login_request::release_password() {
  // @@protoc_insertion_point(field_release:twitter.login_request.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_request::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:twitter.login_request.password)
}

// -------------------------------------------------------------------

// login_reply

// string res_login = 1;
inline void login_reply::clear_res_login() {
  res_login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& login_reply::res_login() const {
  // @@protoc_insertion_point(field_get:twitter.login_reply.res_login)
  return _internal_res_login();
}
inline void login_reply::set_res_login(const std::string& value) {
  _internal_set_res_login(value);
  // @@protoc_insertion_point(field_set:twitter.login_reply.res_login)
}
inline std::string* login_reply::mutable_res_login() {
  // @@protoc_insertion_point(field_mutable:twitter.login_reply.res_login)
  return _internal_mutable_res_login();
}
inline const std::string& login_reply::_internal_res_login() const {
  return res_login_.Get();
}
inline void login_reply::_internal_set_res_login(const std::string& value) {
  
  res_login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void login_reply::set_res_login(std::string&& value) {
  
  res_login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:twitter.login_reply.res_login)
}
inline void login_reply::set_res_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:twitter.login_reply.res_login)
}
inline void login_reply::set_res_login(const char* value,
    size_t size) {
  
  res_login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:twitter.login_reply.res_login)
}
inline std::string* login_reply::_internal_mutable_res_login() {
  
  return res_login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* login_reply::release_res_login() {
  // @@protoc_insertion_point(field_release:twitter.login_reply.res_login)
  return res_login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_reply::set_allocated_res_login(std::string* res_login) {
  if (res_login != nullptr) {
    
  } else {
    
  }
  res_login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:twitter.login_reply.res_login)
}

// -------------------------------------------------------------------

// tweet_request

// string tweet = 1;
inline void tweet_request::clear_tweet() {
  tweet_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& tweet_request::tweet() const {
  // @@protoc_insertion_point(field_get:twitter.tweet_request.tweet)
  return _internal_tweet();
}
inline void tweet_request::set_tweet(const std::string& value) {
  _internal_set_tweet(value);
  // @@protoc_insertion_point(field_set:twitter.tweet_request.tweet)
}
inline std::string* tweet_request::mutable_tweet() {
  // @@protoc_insertion_point(field_mutable:twitter.tweet_request.tweet)
  return _internal_mutable_tweet();
}
inline const std::string& tweet_request::_internal_tweet() const {
  return tweet_.Get();
}
inline void tweet_request::_internal_set_tweet(const std::string& value) {
  
  tweet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void tweet_request::set_tweet(std::string&& value) {
  
  tweet_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:twitter.tweet_request.tweet)
}
inline void tweet_request::set_tweet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tweet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:twitter.tweet_request.tweet)
}
inline void tweet_request::set_tweet(const char* value,
    size_t size) {
  
  tweet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:twitter.tweet_request.tweet)
}
inline std::string* tweet_request::_internal_mutable_tweet() {
  
  return tweet_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* tweet_request::release_tweet() {
  // @@protoc_insertion_point(field_release:twitter.tweet_request.tweet)
  return tweet_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void tweet_request::set_allocated_tweet(std::string* tweet) {
  if (tweet != nullptr) {
    
  } else {
    
  }
  tweet_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tweet,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:twitter.tweet_request.tweet)
}

// string username = 2;
inline void tweet_request::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& tweet_request::username() const {
  // @@protoc_insertion_point(field_get:twitter.tweet_request.username)
  return _internal_username();
}
inline void tweet_request::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:twitter.tweet_request.username)
}
inline std::string* tweet_request::mutable_username() {
  // @@protoc_insertion_point(field_mutable:twitter.tweet_request.username)
  return _internal_mutable_username();
}
inline const std::string& tweet_request::_internal_username() const {
  return username_.Get();
}
inline void tweet_request::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void tweet_request::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:twitter.tweet_request.username)
}
inline void tweet_request::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:twitter.tweet_request.username)
}
inline void tweet_request::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:twitter.tweet_request.username)
}
inline std::string* tweet_request::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* tweet_request::release_username() {
  // @@protoc_insertion_point(field_release:twitter.tweet_request.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void tweet_request::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:twitter.tweet_request.username)
}

// string command = 3;
inline void tweet_request::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& tweet_request::command() const {
  // @@protoc_insertion_point(field_get:twitter.tweet_request.command)
  return _internal_command();
}
inline void tweet_request::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:twitter.tweet_request.command)
}
inline std::string* tweet_request::mutable_command() {
  // @@protoc_insertion_point(field_mutable:twitter.tweet_request.command)
  return _internal_mutable_command();
}
inline const std::string& tweet_request::_internal_command() const {
  return command_.Get();
}
inline void tweet_request::_internal_set_command(const std::string& value) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void tweet_request::set_command(std::string&& value) {
  
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:twitter.tweet_request.command)
}
inline void tweet_request::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:twitter.tweet_request.command)
}
inline void tweet_request::set_command(const char* value,
    size_t size) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:twitter.tweet_request.command)
}
inline std::string* tweet_request::_internal_mutable_command() {
  
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* tweet_request::release_command() {
  // @@protoc_insertion_point(field_release:twitter.tweet_request.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void tweet_request::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:twitter.tweet_request.command)
}

// string id = 4;
inline void tweet_request::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& tweet_request::id() const {
  // @@protoc_insertion_point(field_get:twitter.tweet_request.id)
  return _internal_id();
}
inline void tweet_request::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:twitter.tweet_request.id)
}
inline std::string* tweet_request::mutable_id() {
  // @@protoc_insertion_point(field_mutable:twitter.tweet_request.id)
  return _internal_mutable_id();
}
inline const std::string& tweet_request::_internal_id() const {
  return id_.Get();
}
inline void tweet_request::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void tweet_request::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:twitter.tweet_request.id)
}
inline void tweet_request::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:twitter.tweet_request.id)
}
inline void tweet_request::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:twitter.tweet_request.id)
}
inline std::string* tweet_request::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* tweet_request::release_id() {
  // @@protoc_insertion_point(field_release:twitter.tweet_request.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void tweet_request::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:twitter.tweet_request.id)
}

// -------------------------------------------------------------------

// tweet_reply

// string res_tweet = 1;
inline void tweet_reply::clear_res_tweet() {
  res_tweet_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& tweet_reply::res_tweet() const {
  // @@protoc_insertion_point(field_get:twitter.tweet_reply.res_tweet)
  return _internal_res_tweet();
}
inline void tweet_reply::set_res_tweet(const std::string& value) {
  _internal_set_res_tweet(value);
  // @@protoc_insertion_point(field_set:twitter.tweet_reply.res_tweet)
}
inline std::string* tweet_reply::mutable_res_tweet() {
  // @@protoc_insertion_point(field_mutable:twitter.tweet_reply.res_tweet)
  return _internal_mutable_res_tweet();
}
inline const std::string& tweet_reply::_internal_res_tweet() const {
  return res_tweet_.Get();
}
inline void tweet_reply::_internal_set_res_tweet(const std::string& value) {
  
  res_tweet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void tweet_reply::set_res_tweet(std::string&& value) {
  
  res_tweet_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:twitter.tweet_reply.res_tweet)
}
inline void tweet_reply::set_res_tweet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_tweet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:twitter.tweet_reply.res_tweet)
}
inline void tweet_reply::set_res_tweet(const char* value,
    size_t size) {
  
  res_tweet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:twitter.tweet_reply.res_tweet)
}
inline std::string* tweet_reply::_internal_mutable_res_tweet() {
  
  return res_tweet_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* tweet_reply::release_res_tweet() {
  // @@protoc_insertion_point(field_release:twitter.tweet_reply.res_tweet)
  return res_tweet_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void tweet_reply::set_allocated_res_tweet(std::string* res_tweet) {
  if (res_tweet != nullptr) {
    
  } else {
    
  }
  res_tweet_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_tweet,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:twitter.tweet_reply.res_tweet)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace twitter

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_twitter_2eproto
