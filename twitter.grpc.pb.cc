// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: twitter.proto

#include "twitter.pb.h"
#include "twitter.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace twitter {

static const char* s_register_method_names[] = {
  "/twitter.s_register/register_user",
  "/twitter.s_register/login_user",
  "/twitter.s_register/tweet",
};

std::unique_ptr< s_register::Stub> s_register::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< s_register::Stub> stub(new s_register::Stub(channel));
  return stub;
}

s_register::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_register_user_(s_register_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_login_user_(s_register_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_tweet_(s_register_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status s_register::Stub::register_user(::grpc::ClientContext* context, const ::twitter::user_request& request, ::twitter::user_reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_register_user_, context, request, response);
}

void s_register::Stub::experimental_async::register_user(::grpc::ClientContext* context, const ::twitter::user_request* request, ::twitter::user_reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_register_user_, context, request, response, std::move(f));
}

void s_register::Stub::experimental_async::register_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::user_reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_register_user_, context, request, response, std::move(f));
}

void s_register::Stub::experimental_async::register_user(::grpc::ClientContext* context, const ::twitter::user_request* request, ::twitter::user_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_register_user_, context, request, response, reactor);
}

void s_register::Stub::experimental_async::register_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::user_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_register_user_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::twitter::user_reply>* s_register::Stub::Asyncregister_userRaw(::grpc::ClientContext* context, const ::twitter::user_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::twitter::user_reply>::Create(channel_.get(), cq, rpcmethod_register_user_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::twitter::user_reply>* s_register::Stub::PrepareAsyncregister_userRaw(::grpc::ClientContext* context, const ::twitter::user_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::twitter::user_reply>::Create(channel_.get(), cq, rpcmethod_register_user_, context, request, false);
}

::grpc::Status s_register::Stub::login_user(::grpc::ClientContext* context, const ::twitter::login_request& request, ::twitter::login_reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_login_user_, context, request, response);
}

void s_register::Stub::experimental_async::login_user(::grpc::ClientContext* context, const ::twitter::login_request* request, ::twitter::login_reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_login_user_, context, request, response, std::move(f));
}

void s_register::Stub::experimental_async::login_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::login_reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_login_user_, context, request, response, std::move(f));
}

void s_register::Stub::experimental_async::login_user(::grpc::ClientContext* context, const ::twitter::login_request* request, ::twitter::login_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_login_user_, context, request, response, reactor);
}

void s_register::Stub::experimental_async::login_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::login_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_login_user_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::twitter::login_reply>* s_register::Stub::Asynclogin_userRaw(::grpc::ClientContext* context, const ::twitter::login_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::twitter::login_reply>::Create(channel_.get(), cq, rpcmethod_login_user_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::twitter::login_reply>* s_register::Stub::PrepareAsynclogin_userRaw(::grpc::ClientContext* context, const ::twitter::login_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::twitter::login_reply>::Create(channel_.get(), cq, rpcmethod_login_user_, context, request, false);
}

::grpc::Status s_register::Stub::tweet(::grpc::ClientContext* context, const ::twitter::tweet_request& request, ::twitter::tweet_reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_tweet_, context, request, response);
}

void s_register::Stub::experimental_async::tweet(::grpc::ClientContext* context, const ::twitter::tweet_request* request, ::twitter::tweet_reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_tweet_, context, request, response, std::move(f));
}

void s_register::Stub::experimental_async::tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::tweet_reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_tweet_, context, request, response, std::move(f));
}

void s_register::Stub::experimental_async::tweet(::grpc::ClientContext* context, const ::twitter::tweet_request* request, ::twitter::tweet_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_tweet_, context, request, response, reactor);
}

void s_register::Stub::experimental_async::tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::tweet_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_tweet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::twitter::tweet_reply>* s_register::Stub::AsynctweetRaw(::grpc::ClientContext* context, const ::twitter::tweet_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::twitter::tweet_reply>::Create(channel_.get(), cq, rpcmethod_tweet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::twitter::tweet_reply>* s_register::Stub::PrepareAsynctweetRaw(::grpc::ClientContext* context, const ::twitter::tweet_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::twitter::tweet_reply>::Create(channel_.get(), cq, rpcmethod_tweet_, context, request, false);
}

s_register::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      s_register_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< s_register::Service, ::twitter::user_request, ::twitter::user_reply>(
          [](s_register::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::twitter::user_request* req,
             ::twitter::user_reply* resp) {
               return service->register_user(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      s_register_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< s_register::Service, ::twitter::login_request, ::twitter::login_reply>(
          [](s_register::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::twitter::login_request* req,
             ::twitter::login_reply* resp) {
               return service->login_user(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      s_register_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< s_register::Service, ::twitter::tweet_request, ::twitter::tweet_reply>(
          [](s_register::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::twitter::tweet_request* req,
             ::twitter::tweet_reply* resp) {
               return service->tweet(ctx, req, resp);
             }, this)));
}

s_register::Service::~Service() {
}

::grpc::Status s_register::Service::register_user(::grpc::ServerContext* context, const ::twitter::user_request* request, ::twitter::user_reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status s_register::Service::login_user(::grpc::ServerContext* context, const ::twitter::login_request* request, ::twitter::login_reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status s_register::Service::tweet(::grpc::ServerContext* context, const ::twitter::tweet_request* request, ::twitter::tweet_reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace twitter

