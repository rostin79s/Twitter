// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: twitter.proto
#ifndef GRPC_twitter_2eproto__INCLUDED
#define GRPC_twitter_2eproto__INCLUDED

#include "twitter.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace twitter {

class s_register final {
 public:
  static constexpr char const* service_full_name() {
    return "twitter.s_register";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status register_user(::grpc::ClientContext* context, const ::twitter::user_request& request, ::twitter::user_reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::twitter::user_reply>> Asyncregister_user(::grpc::ClientContext* context, const ::twitter::user_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::twitter::user_reply>>(Asyncregister_userRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::twitter::user_reply>> PrepareAsyncregister_user(::grpc::ClientContext* context, const ::twitter::user_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::twitter::user_reply>>(PrepareAsyncregister_userRaw(context, request, cq));
    }
    virtual ::grpc::Status login_user(::grpc::ClientContext* context, const ::twitter::login_request& request, ::twitter::login_reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::twitter::login_reply>> Asynclogin_user(::grpc::ClientContext* context, const ::twitter::login_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::twitter::login_reply>>(Asynclogin_userRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::twitter::login_reply>> PrepareAsynclogin_user(::grpc::ClientContext* context, const ::twitter::login_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::twitter::login_reply>>(PrepareAsynclogin_userRaw(context, request, cq));
    }
    virtual ::grpc::Status tweet(::grpc::ClientContext* context, const ::twitter::tweet_request& request, ::twitter::tweet_reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::twitter::tweet_reply>> Asynctweet(::grpc::ClientContext* context, const ::twitter::tweet_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::twitter::tweet_reply>>(AsynctweetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::twitter::tweet_reply>> PrepareAsynctweet(::grpc::ClientContext* context, const ::twitter::tweet_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::twitter::tweet_reply>>(PrepareAsynctweetRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void register_user(::grpc::ClientContext* context, const ::twitter::user_request* request, ::twitter::user_reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void register_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::user_reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void register_user(::grpc::ClientContext* context, const ::twitter::user_request* request, ::twitter::user_reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void register_user(::grpc::ClientContext* context, const ::twitter::user_request* request, ::twitter::user_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void register_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::user_reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void register_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::user_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void login_user(::grpc::ClientContext* context, const ::twitter::login_request* request, ::twitter::login_reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void login_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::login_reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void login_user(::grpc::ClientContext* context, const ::twitter::login_request* request, ::twitter::login_reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void login_user(::grpc::ClientContext* context, const ::twitter::login_request* request, ::twitter::login_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void login_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::login_reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void login_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::login_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void tweet(::grpc::ClientContext* context, const ::twitter::tweet_request* request, ::twitter::tweet_reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::tweet_reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void tweet(::grpc::ClientContext* context, const ::twitter::tweet_request* request, ::twitter::tweet_reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void tweet(::grpc::ClientContext* context, const ::twitter::tweet_request* request, ::twitter::tweet_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::tweet_reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::tweet_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::twitter::user_reply>* Asyncregister_userRaw(::grpc::ClientContext* context, const ::twitter::user_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::twitter::user_reply>* PrepareAsyncregister_userRaw(::grpc::ClientContext* context, const ::twitter::user_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::twitter::login_reply>* Asynclogin_userRaw(::grpc::ClientContext* context, const ::twitter::login_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::twitter::login_reply>* PrepareAsynclogin_userRaw(::grpc::ClientContext* context, const ::twitter::login_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::twitter::tweet_reply>* AsynctweetRaw(::grpc::ClientContext* context, const ::twitter::tweet_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::twitter::tweet_reply>* PrepareAsynctweetRaw(::grpc::ClientContext* context, const ::twitter::tweet_request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status register_user(::grpc::ClientContext* context, const ::twitter::user_request& request, ::twitter::user_reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::twitter::user_reply>> Asyncregister_user(::grpc::ClientContext* context, const ::twitter::user_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::twitter::user_reply>>(Asyncregister_userRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::twitter::user_reply>> PrepareAsyncregister_user(::grpc::ClientContext* context, const ::twitter::user_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::twitter::user_reply>>(PrepareAsyncregister_userRaw(context, request, cq));
    }
    ::grpc::Status login_user(::grpc::ClientContext* context, const ::twitter::login_request& request, ::twitter::login_reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::twitter::login_reply>> Asynclogin_user(::grpc::ClientContext* context, const ::twitter::login_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::twitter::login_reply>>(Asynclogin_userRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::twitter::login_reply>> PrepareAsynclogin_user(::grpc::ClientContext* context, const ::twitter::login_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::twitter::login_reply>>(PrepareAsynclogin_userRaw(context, request, cq));
    }
    ::grpc::Status tweet(::grpc::ClientContext* context, const ::twitter::tweet_request& request, ::twitter::tweet_reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::twitter::tweet_reply>> Asynctweet(::grpc::ClientContext* context, const ::twitter::tweet_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::twitter::tweet_reply>>(AsynctweetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::twitter::tweet_reply>> PrepareAsynctweet(::grpc::ClientContext* context, const ::twitter::tweet_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::twitter::tweet_reply>>(PrepareAsynctweetRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void register_user(::grpc::ClientContext* context, const ::twitter::user_request* request, ::twitter::user_reply* response, std::function<void(::grpc::Status)>) override;
      void register_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::user_reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void register_user(::grpc::ClientContext* context, const ::twitter::user_request* request, ::twitter::user_reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void register_user(::grpc::ClientContext* context, const ::twitter::user_request* request, ::twitter::user_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void register_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::user_reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void register_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::user_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void login_user(::grpc::ClientContext* context, const ::twitter::login_request* request, ::twitter::login_reply* response, std::function<void(::grpc::Status)>) override;
      void login_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::login_reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void login_user(::grpc::ClientContext* context, const ::twitter::login_request* request, ::twitter::login_reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void login_user(::grpc::ClientContext* context, const ::twitter::login_request* request, ::twitter::login_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void login_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::login_reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void login_user(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::login_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void tweet(::grpc::ClientContext* context, const ::twitter::tweet_request* request, ::twitter::tweet_reply* response, std::function<void(::grpc::Status)>) override;
      void tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::tweet_reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void tweet(::grpc::ClientContext* context, const ::twitter::tweet_request* request, ::twitter::tweet_reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void tweet(::grpc::ClientContext* context, const ::twitter::tweet_request* request, ::twitter::tweet_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::tweet_reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::twitter::tweet_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::twitter::user_reply>* Asyncregister_userRaw(::grpc::ClientContext* context, const ::twitter::user_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::twitter::user_reply>* PrepareAsyncregister_userRaw(::grpc::ClientContext* context, const ::twitter::user_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::twitter::login_reply>* Asynclogin_userRaw(::grpc::ClientContext* context, const ::twitter::login_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::twitter::login_reply>* PrepareAsynclogin_userRaw(::grpc::ClientContext* context, const ::twitter::login_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::twitter::tweet_reply>* AsynctweetRaw(::grpc::ClientContext* context, const ::twitter::tweet_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::twitter::tweet_reply>* PrepareAsynctweetRaw(::grpc::ClientContext* context, const ::twitter::tweet_request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_register_user_;
    const ::grpc::internal::RpcMethod rpcmethod_login_user_;
    const ::grpc::internal::RpcMethod rpcmethod_tweet_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status register_user(::grpc::ServerContext* context, const ::twitter::user_request* request, ::twitter::user_reply* response);
    virtual ::grpc::Status login_user(::grpc::ServerContext* context, const ::twitter::login_request* request, ::twitter::login_reply* response);
    virtual ::grpc::Status tweet(::grpc::ServerContext* context, const ::twitter::tweet_request* request, ::twitter::tweet_reply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_register_user : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_register_user() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_register_user() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_user(::grpc::ServerContext* /*context*/, const ::twitter::user_request* /*request*/, ::twitter::user_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister_user(::grpc::ServerContext* context, ::twitter::user_request* request, ::grpc::ServerAsyncResponseWriter< ::twitter::user_reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_login_user : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_login_user() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_login_user() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login_user(::grpc::ServerContext* /*context*/, const ::twitter::login_request* /*request*/, ::twitter::login_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin_user(::grpc::ServerContext* context, ::twitter::login_request* request, ::grpc::ServerAsyncResponseWriter< ::twitter::login_reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_tweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_tweet() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_tweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status tweet(::grpc::ServerContext* /*context*/, const ::twitter::tweet_request* /*request*/, ::twitter::tweet_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttweet(::grpc::ServerContext* context, ::twitter::tweet_request* request, ::grpc::ServerAsyncResponseWriter< ::twitter::tweet_reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_register_user<WithAsyncMethod_login_user<WithAsyncMethod_tweet<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_register_user : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_register_user() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::twitter::user_request, ::twitter::user_reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::twitter::user_request* request, ::twitter::user_reply* response) { return this->register_user(context, request, response); }));}
    void SetMessageAllocatorFor_register_user(
        ::grpc::experimental::MessageAllocator< ::twitter::user_request, ::twitter::user_reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::twitter::user_request, ::twitter::user_reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_register_user() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_user(::grpc::ServerContext* /*context*/, const ::twitter::user_request* /*request*/, ::twitter::user_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* register_user(
      ::grpc::CallbackServerContext* /*context*/, const ::twitter::user_request* /*request*/, ::twitter::user_reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* register_user(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::twitter::user_request* /*request*/, ::twitter::user_reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_login_user : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_login_user() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::twitter::login_request, ::twitter::login_reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::twitter::login_request* request, ::twitter::login_reply* response) { return this->login_user(context, request, response); }));}
    void SetMessageAllocatorFor_login_user(
        ::grpc::experimental::MessageAllocator< ::twitter::login_request, ::twitter::login_reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::twitter::login_request, ::twitter::login_reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_login_user() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login_user(::grpc::ServerContext* /*context*/, const ::twitter::login_request* /*request*/, ::twitter::login_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* login_user(
      ::grpc::CallbackServerContext* /*context*/, const ::twitter::login_request* /*request*/, ::twitter::login_reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* login_user(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::twitter::login_request* /*request*/, ::twitter::login_reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_tweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_tweet() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::twitter::tweet_request, ::twitter::tweet_reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::twitter::tweet_request* request, ::twitter::tweet_reply* response) { return this->tweet(context, request, response); }));}
    void SetMessageAllocatorFor_tweet(
        ::grpc::experimental::MessageAllocator< ::twitter::tweet_request, ::twitter::tweet_reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::twitter::tweet_request, ::twitter::tweet_reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_tweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status tweet(::grpc::ServerContext* /*context*/, const ::twitter::tweet_request* /*request*/, ::twitter::tweet_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* tweet(
      ::grpc::CallbackServerContext* /*context*/, const ::twitter::tweet_request* /*request*/, ::twitter::tweet_reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* tweet(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::twitter::tweet_request* /*request*/, ::twitter::tweet_reply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_register_user<ExperimentalWithCallbackMethod_login_user<ExperimentalWithCallbackMethod_tweet<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_register_user<ExperimentalWithCallbackMethod_login_user<ExperimentalWithCallbackMethod_tweet<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_register_user : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_register_user() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_register_user() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_user(::grpc::ServerContext* /*context*/, const ::twitter::user_request* /*request*/, ::twitter::user_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_login_user : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_login_user() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_login_user() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login_user(::grpc::ServerContext* /*context*/, const ::twitter::login_request* /*request*/, ::twitter::login_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_tweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_tweet() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_tweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status tweet(::grpc::ServerContext* /*context*/, const ::twitter::tweet_request* /*request*/, ::twitter::tweet_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_register_user : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_register_user() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_register_user() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_user(::grpc::ServerContext* /*context*/, const ::twitter::user_request* /*request*/, ::twitter::user_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister_user(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_login_user : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_login_user() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_login_user() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login_user(::grpc::ServerContext* /*context*/, const ::twitter::login_request* /*request*/, ::twitter::login_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin_user(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_tweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_tweet() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_tweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status tweet(::grpc::ServerContext* /*context*/, const ::twitter::tweet_request* /*request*/, ::twitter::tweet_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttweet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_register_user : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_register_user() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->register_user(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_register_user() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_user(::grpc::ServerContext* /*context*/, const ::twitter::user_request* /*request*/, ::twitter::user_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* register_user(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* register_user(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_login_user : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_login_user() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->login_user(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_login_user() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login_user(::grpc::ServerContext* /*context*/, const ::twitter::login_request* /*request*/, ::twitter::login_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* login_user(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* login_user(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_tweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_tweet() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->tweet(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_tweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status tweet(::grpc::ServerContext* /*context*/, const ::twitter::tweet_request* /*request*/, ::twitter::tweet_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* tweet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* tweet(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_register_user : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_register_user() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::twitter::user_request, ::twitter::user_reply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::twitter::user_request, ::twitter::user_reply>* streamer) {
                       return this->Streamedregister_user(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_register_user() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status register_user(::grpc::ServerContext* /*context*/, const ::twitter::user_request* /*request*/, ::twitter::user_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedregister_user(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::twitter::user_request,::twitter::user_reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_login_user : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_login_user() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::twitter::login_request, ::twitter::login_reply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::twitter::login_request, ::twitter::login_reply>* streamer) {
                       return this->Streamedlogin_user(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_login_user() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status login_user(::grpc::ServerContext* /*context*/, const ::twitter::login_request* /*request*/, ::twitter::login_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogin_user(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::twitter::login_request,::twitter::login_reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_tweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_tweet() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::twitter::tweet_request, ::twitter::tweet_reply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::twitter::tweet_request, ::twitter::tweet_reply>* streamer) {
                       return this->Streamedtweet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_tweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status tweet(::grpc::ServerContext* /*context*/, const ::twitter::tweet_request* /*request*/, ::twitter::tweet_reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedtweet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::twitter::tweet_request,::twitter::tweet_reply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_register_user<WithStreamedUnaryMethod_login_user<WithStreamedUnaryMethod_tweet<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_register_user<WithStreamedUnaryMethod_login_user<WithStreamedUnaryMethod_tweet<Service > > > StreamedService;
};

}  // namespace twitter


#endif  // GRPC_twitter_2eproto__INCLUDED
